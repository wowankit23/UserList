// Generated by Dagger (https://dagger.dev).
package com.test.mobileprogarmming.data;

import com.test.mobileprogarmming.data.local.UserDao;
import com.test.mobileprogarmming.data.remote.UserRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserRepository_Factory implements Factory<UserRepository> {
  private final Provider<UserRemoteDataSource> userRemoteDataSourceProvider;

  private final Provider<UserDao> userDaoProvider;

  public UserRepository_Factory(Provider<UserRemoteDataSource> userRemoteDataSourceProvider,
      Provider<UserDao> userDaoProvider) {
    this.userRemoteDataSourceProvider = userRemoteDataSourceProvider;
    this.userDaoProvider = userDaoProvider;
  }

  @Override
  public UserRepository get() {
    return newInstance(userRemoteDataSourceProvider.get(), userDaoProvider.get());
  }

  public static UserRepository_Factory create(
      Provider<UserRemoteDataSource> userRemoteDataSourceProvider,
      Provider<UserDao> userDaoProvider) {
    return new UserRepository_Factory(userRemoteDataSourceProvider, userDaoProvider);
  }

  public static UserRepository newInstance(UserRemoteDataSource userRemoteDataSource,
      UserDao userDao) {
    return new UserRepository(userRemoteDataSource, userDao);
  }
}
